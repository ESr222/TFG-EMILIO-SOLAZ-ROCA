#include <Servo.h>  // Librería para controlar el servo
Servo myservo;      // Crear objeto servo para el control del servo

// Pines del sensor ultrasonido
const int Trig = 12;
const int Echo = 13;

// Pines de control de motores y registro de desplazamiento 74HCT595N
#define PWM1_PIN            5      // Pin PWM para el primer motor
#define PWM2_PIN            6      // Pin PWM para el segundo motor
#define SHCP_PIN            2      // Pin del reloj de desplazamiento
#define EN_PIN              7      // Pin de habilitación del registro de desplazamiento
#define DATA_PIN            8      // Pin de datos seriales del registro de desplazamiento
#define STCP_PIN            4      // Pin del reloj de registro de almacenamiento

// Valores de control de dirección del motor
const int Forward       = 92;    // Adelante
const int Backward      = 163;   // Atrás
const int Turn_Left     = 149;   // Girar a la izquierda
const int Turn_Right    = 106;   // Girar a la derecha
const int Rotate_Right  = 83;    // Rotar sobre sí mismo a la derecha
const int Rotate_Left   = 172;   // Rotar sobre sí mismo a la izquierda
const int Stop_Movement = 0;     // Detener

void setup() {
    myservo.attach(9, 700, 2400);  // Conectar el servo al pin 9
    pinMode(Trig, OUTPUT);         // Configurar pin Trig como salida
    pinMode(Echo, INPUT);          // Configurar pin Echo como entrada

    // Configurar los pines del registro de desplazamiento
    pinMode(SHCP_PIN, OUTPUT);
    pinMode(EN_PIN, OUTPUT);
    pinMode(DATA_PIN, OUTPUT);
    pinMode(STCP_PIN, OUTPUT);
    pinMode(PWM1_PIN, OUTPUT);
    pinMode(PWM2_PIN, OUTPUT);
    
    // Inicializar comunicación serial
    Serial.begin(115200);
}

void loop() {
    // Si hay datos disponibles en la comunicación serial
    if (Serial.available() > 0) {
        char command = Serial.read();  // Leer el comando recibido
        
        // Ejecutar la acción correspondiente al comando
        switch (command) {
            case 'F':
                Motor(Forward, 250); // Mover hacia adelante
                break;
            case 'B':
                Motor(Backward, 250); // Mover hacia atrás
                break;
            case 'L':
                Motor(Turn_Left, 250); // Girar a la izquierda
                break;
            case 'R':
                Motor(Turn_Right, 250); // Girar a la derecha
                break;
            case 'D':
                Motor(Rotate_Right, 250); // Rotar sobre sí mismo a la derecha
                break;
            case 'G':
                Motor(Rotate_Left, 250); // Rotar sobre sí mismo a la izquierda
                break;
            case 'S':
                Motor(Stop_Movement, 0); // Detener
                break;
            default:
                Motor(Stop_Movement, 0); // Comando desconocido, detener por seguridad
                break;
        }
    }
}

// Función para controlar los motores
void Motor(int Dir, int Speed) {
    analogWrite(PWM1_PIN, Speed);  // Configurar la velocidad del primer motor
    analogWrite(PWM2_PIN, Speed);  // Configurar la velocidad del segundo motor

    digitalWrite(STCP_PIN, LOW);   // Preparar el registro de desplazamiento
    shiftOut(DATA_PIN, SHCP_PIN, MSBFIRST, Dir);  // Enviar el comando al registro de desplazamiento
    digitalWrite(STCP_PIN, HIGH);  // Almacenar el valor en el registro de desplazamiento
}
