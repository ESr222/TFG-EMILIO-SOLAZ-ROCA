// Definición de los pines para el control PWM
#define PWM1_PIN            5  // Pin PWM para el control del primer motor
#define PWM2_PIN            6  // Pin PWM para el control del segundo motor

// Definición de los pines para el chip 74HCT595N (registro de desplazamiento)
#define SHCP_PIN            2  // Pin para el reloj de desplazamiento
#define EN_PIN              7  // Pin de habilitación para el control del chip
#define DATA_PIN            8  // Pin para los datos en serie
#define STCP_PIN            4  // Pin para el reloj del registro de almacenamiento

// Definición de los pines para los sensores de seguimiento de línea
#define LEFT_LINE_TRACJING          A0  // Pin para el sensor de la izquierda
#define CENTER_LINE_TRACJING        A1  // Pin para el sensor central
#define right_LINE_TRACJING         A2  // Pin para el sensor de la derecha

// Definición de constantes para la dirección del movimiento
const int Forward       = 92;   // Constante para mover hacia adelante
const int Backward      = 163;  // Constante para mover hacia atrás
const int Turn_Left     = 149;  // Constante para girar a la izquierda
const int Turn_Right    = 106;  // Constante para girar a la derecha
const int Top_Left      = 20;   // Constante para moverse hacia arriba a la izquierda
const int Bottom_Left   = 129;  // Constante para moverse hacia abajo a la izquierda
const int Top_Right     = 72;   // Constante para moverse hacia arriba a la derecha
const int Bottom_Right  = 34;   // Constante para moverse hacia abajo a la derecha
const int Stop          = 0;    // Constante para detenerse
const int Contrarotate  = 172;  // Constante para rotación en sentido antihorario
const int Clockwise     = 83;   // Constante para rotación en sentido horario

// Variables para almacenar los valores de los sensores de línea
int Left_Tra_Value;
int Center_Tra_Value;
int Right_Tra_Value;
int Black_Line = 500;  // Umbral para detectar la línea negra

void setup()
{
    // Configuración de los pines de salida para el control del chip y los motores
    pinMode(SHCP_PIN, OUTPUT);
    pinMode(EN_PIN, OUTPUT);
    pinMode(DATA_PIN, OUTPUT);
    pinMode(STCP_PIN, OUTPUT);
    pinMode(PWM1_PIN, OUTPUT);
    pinMode(PWM2_PIN, OUTPUT);

    // Configuración de los pines de entrada para los sensores de línea
    pinMode(LEFT_LINE_TRACJING, INPUT);
    pinMode(CENTER_LINE_TRACJING, INPUT);
    pinMode(right_LINE_TRACJING, INPUT);
}

void loop()
{
    // Lectura de los valores de los sensores de línea
    Left_Tra_Value = analogRead(LEFT_LINE_TRACJING);
    Center_Tra_Value = analogRead(CENTER_LINE_TRACJING);
    Right_Tra_Value = analogRead(right_LINE_TRACJING);

    // Lógica de control para seguir la línea
    if (Left_Tra_Value < Black_Line && Center_Tra_Value >= Black_Line && Right_Tra_Value < Black_Line)
    {
        // Si solo el sensor central detecta la línea, avanzar recto
        Motor(Forward, 250);
    }
    else if (Left_Tra_Value >= Black_Line && Center_Tra_Value >= Black_Line && Right_Tra_Value < Black_Line)
    {
        // Si los sensores izquierdo y central detectan la línea, girar ligeramente a la derecha
        Motor(Contrarotate, 230);
    }
    else if (Left_Tra_Value >= Black_Line && Center_Tra_Value < Black_Line && Right_Tra_Value < Black_Line)
    {
        // Si solo el sensor izquierdo detecta la línea, girar más a la derecha
        Motor(Contrarotate, 250);
    }
    else if (Left_Tra_Value < Black_Line && Center_Tra_Value < Black_Line && Right_Tra_Value >= Black_Line)
    {
        // Si solo el sensor derecho detecta la línea, girar más a la izquierda
        Motor(Clockwise, 250);
    }
    else if (Left_Tra_Value < Black_Line && Center_Tra_Value >= Black_Line && Right_Tra_Value >= Black_Line)
    {
        // Si los sensores central y derecho detectan la línea, girar ligeramente a la izquierda
        Motor(Clockwise, 230);
    }
    else if (Left_Tra_Value >= Black_Line && Center_Tra_Value >= Black_Line && Right_Tra_Value >= Black_Line)
    {
        // Si todos los sensores detectan la línea, detenerse (podría estar en un cruce)
        Motor(Stop, 0);
    }
}

// Función para controlar los motores
void Motor(int Dir, int Speed)
{
    // Deshabilitar el control de los motores antes de hacer cambios
    digitalWrite(EN_PIN, LOW);

    // Configurar la velocidad de los motores mediante PWM
    analogWrite(PWM1_PIN, Speed);
    analogWrite(PWM2_PIN, Speed);

    // Enviar la dirección deseada al registro de desplazamiento
    digitalWrite(STCP_PIN, LOW);
    shiftOut(DATA_PIN, SHCP_PIN, MSBFIRST, Dir);
    digitalWrite(STCP_PIN, HIGH);
}
